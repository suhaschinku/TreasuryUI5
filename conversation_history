@app.route('/get-conversation-history', methods=['GET'])
def get_conversation_history():
    """
    Retrieve the top 5 latest conversation history records for the user's IP.
    """
    connection = None
    cursor = None
    try:
        logger.info("Received get-conversation-history request")
        user_id = request.remote_addr  # Use client IP as user_id
        schema_name = "GENAI_EARNING_CALL_1_9N3UKNZHQ3I2CXHDJNQ9EXV58_RT"
        table_name = "TREASURY_AI_CONVERSATION_HISTORY"

        # Get database connection
        connection = get_db_connection()
        if not connection:
            logger.error("Failed to get database connection for conversation history")
            raise AppError(
                ErrorCategory.DATABASE,
                "Failed to retrieve conversation history",
                status_code=500
            )

        cursor = connection.cursor()

        # Query to fetch top 5 latest conversations
        query = f"""
            SELECT TOP 5 ID, USER_ID, CONVERSATION_DATA, TIMESTAMP
            FROM "{schema_name}"."{table_name}"
            WHERE USER_ID = ?
            ORDER BY TIMESTAMP DESC
        """
        cursor.execute(query, (user_id,))
        results = cursor.fetchall()

        conversations = []
        for row in results:
            conversation_id, user_id, conversation_data, timestamp = row
            try:
                data = json.loads(conversation_data)
                # Extract query and a response snippet (first 50 chars)
                query = data.get('query', 'N/A')
                response = data.get('response', 'N/A')
                response_snippet = response[:50] + ('...' if len(response) > 50 else '')
                conversations.append({
                    'query': query,
                    'response_snippet': response_snippet,
                    'timestamp': timestamp.isoformat()
                })
            except json.JSONDecodeError:
                logger.warning(f"Invalid JSON in conversation ID {conversation_id}")
                continue

        logger.info(f"Retrieved {len(conversations)} conversation records for user {user_id}")
        return jsonify({
            "success": True,
            "conversations": conversations,
            "count": len(conversations),
            "message": f"Retrieved {len(conversations)} conversation records"
        }), 200

    except AppError:
        raise
    except Exception as e:
        logger.error(f"Error in get-conversation-history endpoint: {str(e)}\n{traceback.format_exc()}")
        raise AppError(
            ErrorCategory.DATABASE,
            "Failed to retrieve conversation history",
            status_code=500,
            details={"error": str(e)}
        )
    finally:
        if cursor:
            cursor.close()
        if connection:
            release_db_connection(connection)
